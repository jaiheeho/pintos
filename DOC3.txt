       	       	    +---------------------------+
		    |		CS 140		|
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT	|
		    +---------------------------+

---- GROUP ----
team 01
>> Fill in the names and email addresses of your group members.

Jaihee Kim <jaehee0402@kaist.ac.kr>
Juneyong Yang <laoconeth@kaist.ac.kr>
---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.
			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


::In page.h ::

struct spte {
	enum spte_type type; // 
	void* user_addr; // user virtual address of the page
	void* phys_addr; // physical address of the linked rame
	struct fte * fte; // frame table entry structure of the frame
	bool present; // this flag is true if the page is in memory; false if in swap
	int swap_idx; // if the page is in swap space, this variable holds the swap
					slot index
	bool writable; // true if the page is writable
	bool frame_locked; // if this is true, this page(frame) cannot be evicted.
 					needed to resolve some sync issues
	struct hash_elem elem; // hash adt link
	bool wait_for_loading; // if this true, then this page needs to load data from
				      the file specified in loading_info
	struct lazy_loading_info loading_info; // structure that contains file loading
                 			          info such as struct file, offset, etc.
	bool for_mmap; // if this page is an mmaped region, true. else, false.

};

struct fte{
	void* frame_addr;  // The physical address of the frame.
	struct spte* supplement_page; // Linking pointer to the spte that owns this
					 frame.
	struct thread* thread; // thread that owns this frame
	bool frame_locked;     // frame lock. if a frame is locked, then its immune
				  to eviction.
	struct list_elem elem;
};





struct lazy_loading_info{
	size_t page_read_bytes; // bytes to read from file to page
	size_t page_zero_bytes; // bytes to zero out to page
	off_t ofs;                     // file offset to read from
	struct file *executable;  // struct file of the file to read from
}


::in frame.c::

static struct list frame_table; // frame table list
static struct semaphore frame_table_lock;  // lock to protect frame table
static struct list_elem *clock_head;  // list iterator for clock algorithm


::in thread.h::
struct hash spt; //supplementary page table(hash adt). One per process





---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.
If the program pokes a certain address, and if that address is not registered
in the pintos page directory, then the page fault handler is invoked. The page fault
handler goes through the supplementary page table(spt) and seeks for the entry for
that address. if found, it reads the entry and takes appropriate measures. For example,
suppose the page is in swap space. It allocates a frame via frame_allocate, which evicts
other frames if necessary. Then it accesses the swap space and copies the data of the
swap entry into the frame. After that, the physical address of the frame and other
metadatas are recorded in the spte. Finally, it calles pagedir_set_page() to actually
install the frame into the pintos page directory table.


>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?
We avoided this issue by not using kernel address to access the frame.
The user program only sees user address, so there is no issue in this
case. However, when the kernel wants to access it, it can use 2 addresses-
user address and physical(kernel virtual) address. In our code, when the
kernel is handling system calls, the kernel always uses user address. So
this portion of the issue is resolved. The page fault handler, and its
servant functions(functions in page.c, frame.c) do use physical addresses
since they are the functions that actually support the VM. However,
these accesses are kernel operations, and thus must not count as 'dirty'.
For example, loading_from_file() will actually write data to the frame
since it must actually load data to the frame, and serve it.But it would
be silly if we count this as 'dirty'. Thus, this issue is nonexistent.
Thus, it is safe to say that the aliasing problem is self-handled.



---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

When frame_allocate() is called, the first thing it does is to acquire the
frame_table_lock. This lock protects the whole frame table. After doing its job,
frame_allocate() releases the lock at the very end. Thus, if two user processes
both call frame_allocate() at the same time, one process will be blocked at the
very start of frame_allocate() since the process which came first already has the lock.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

Page directory를 처음부터 짜는 것이 아니라, Supplement page table을 이용하기 떄문에 virtual-to-physical mapping은 서로간에 link가 필요하고, 그에 따른 다양한 flag들도 필요하기 때문에 위와 같이 data structure를 구성하였다.

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
1.  For supplement page table entry in page.c
struct spte {
bool present;                   // page가  memory에 있는지 확인하는 flag
int swap_idx;                   // page가  swap space에 있다면, swap의 몇번째 slot에 있는 지 확인
bool frame_locked;              // spte가 생성되고, frame을 allocate된 다음에, 이것이 초기화 되기전까지,
								   frame이 초기화 되기 전까지 하는 lock해주는 flag.
}

2. In swap.c 
static uint32_t swap_size;  //전체 swap space 단위는 PGSIZE
static struct disk *swap_disk; //swap disk 를 나타내는 struct disk 포인터
static struct semaphore swap_lock; //swap disk에 I/O를 할떄 swap space를 락해주는 semaphore
static struct bitmap *swap_bitmap; //Swap slot을 관리해주는 index mapping

3. In frame.c
static struct list_elem *clock_head; frame evict를 위한 clock pointer;
 
---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.
1.우선, frame allocate된 순간, 모든 frame은 global한 frame_table (list)에 추가된다.
2.frame_evict() 함수가 불려지면, list의 clock_head 부터 access bit을 확인한다.
(clock_head는 처음 프레임이 추가될떄, list_begin으로 초기화 된뒤 그 이후에는 계속 업데이트 된다.)
3. access bit이 true이면, access bit을 false로 바꾸어 주어 second chance를 준다. 그후
 frame_table의 다음 frame으로 넘어간다.
4. 만약 access bit이 false이면, 이 frame을 victim으로 선정하여 swap_out시킨다. 
5. clock_head를 victim의 다음 list_elem으로 바꿔준다.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?
1. frame이 더이상, Q에서 사용되지 않는 경우는 크게 2가지 이다. (1)SWAP_OUT, (2)두번쨰는 free

(1) frame이 frame_evict에서 사용되어, SWAP_OUT을 해주는 경우,
(1)-1 frame_table에서 frame을 제거시켜주어, frame이 더이상 사용되고 있지 않음을 알게 해준다.
(1)-2 supplement page table에서는 frame과 mapping이 되어있는 user address에 대한 supplement page table
entry를 찾아서, 이 user_address의 present flag를 false로 만들어, 이 page가 swap out됐음을 알린다.
(1)-3 thread의 pagedir에도 이 useaddress가 지금 frame이 할당되어 있지 않음을 알아야 하기 때문에, pagedir_clear_page 를 통해서
pagedir entry를 제거 하게 된다.

(2) Useraddress page가 완전히 free가 되는 경우, (e.g process exit)
(2)-1 frame을 frame table에서 제거, 
(2)-2 spte또한 free시켜주어, spte에 해당하는 user_address가 아예 사용되고 있지 않음을 밝힌다.
(2)-2 pagedir에서  pagedir_clear_page를 통해서 pagedir에서도 완전히 clear시켜준다.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

1. user VA에 대해서 page_fault발생.
2. fault address가 valid 한 address인지 확인 (e.g NULL, Kernel Address space(>PHYS_BASE)... )
-> Invalid할시에 바로 exit(-1)
3. if( (uint32_t)PHYS_BASE - (uint32_t)fault_addr >= (uint32_t)STACK_MAX ) 를 통해서
fault address가 STACK 영역인지 아니면, STACK보다 아래쪽 영역, code나 data영역인지를 확인한다.
4. CODE혹은 DATA의 영역이라면, 그에 따른 frame을 할당하고, page-frame mapping을 통해서 page -table 관리
5. STACK으로 예상된 구역에서 fault가 발생됐을시 (1)read, (2)write로 상황을 나눈다.
5-(1). Read일시, page가 disk에 있는 경우(lazy loading, swap space)면 disk에서 불러오고, 새로운 페이지를 할당하지 않음
5-(2). Write일시, 또한, 두가지 상황으로 나뉜다. (a)fault address > esp, (b)fault address < esp
5-(2)-a. page가 disk에 있으면, 불러오고, disk에 없더라도, write를 위한 새로운 page를 할당한다.
5-(2)-b. 한번에 stack을 늘릴 수 있는 정도는 , STACK_STRIDE로 정해져 있다. 이 보다 크게 stack을 늘리려는 시도는 프로세스를 종료시키고
그렇지 않을 경우, stack을 늘려준다.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

VM을 관리하는데 있어서 가장 중요한 것은, Supple page table관리와, Frametable, Swap space관리이다.
(1) Supple page table은 각각의 프로세스에게 할당된건이기 때문에, multi process의 문제는 발생하지 않는다. 그래서
따로 lock을 필요로 하지는 않지만, frame을 evict할 때, spte의 정보를 바꾸게 되는데, 아직 완전히 initialize가 끝나지 않은
spte에 대해서, frame-eviction이 바로 일어나는 경우가 있다. 이를 위해서, frame이 vm에 allocate된후, 완전히 install page까지의
초기화 과정을 거칠때까지, frame_locked라는 flag를 활성화화여, sync를 하였다.

(2) frame_table을 모든 process가 공유하는 shared resource이기 때문에, 프로세스마다 싱크를 맞춰 주어야 한다. 
그러기 위해서, frame_table_lock을 사용하여, frame_table을 수정하거나, 사용하는 모든 상황에 대해서 lock을 걸어 주어 sync를 맞춰 주었다.

(3) swap space또한, 모든 process가 공유하기 때문에,  swap_lock를 통해서 sync를 유지 시켜주었따.

(4) 각각의 supplement page table을 안전하게 하기 위해서, supplemental_page_table을 모두 lock을 걸어줬을 경우, 
Process A가 Frame_table에 대한 lock을 잡고, Process가 frame_table을 위한 lock을 기다리는 상황에서
process A가 evict하려던, frame이 process B가 사용하던 것이었다면 데드락이 발생한다. 이는 실제로 자주 일어날 수 있는 상황이다.(process가 2개일 경우 매우흔하게) 
-> 따라서, spt에 모두 lock을 걸기 보다는, frame_table에서 supplement_page_table의 spte를 확인함으로써, 데드락을 피하면서, sync를 맞춰 주었다.


>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

(1) B는 frame_evict를 하기 위해서 frame_table_lock을 소유한다.
(2) B는 frame을 가지고 있는, supplement page table entry의  present bit(=!access bit)를 false로 바꿔준뒤, pagedir_clear를 호출한다.
(3) A가 frame에 접근하려 하면, pagefault가 나고, page fault handler는 우리가 지정해진 함수를 호출해 page를 loading하려고 한다.
(4) 하지만, 이미 supplement page table entry의  present bit false로 지정되어 있기 때문에, 새로운 frame을 allocate받기 위해서 frame_table lock을 기다려야 한다. 
(5) 따라서 B가 evict를 마칠 때까지, A는 block되어 있다.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

(1) frame_locked 이라는 flag를 추가하였다.
(2) user address에서 page-fault가 발생하여, file system이나 swap에서 읽기 위해서는
새로운 frame을 allocate받아야하는데,
(3) 이 allocate된 frame과 연결된 spte의 frame_locked 를 true로 바꿔준다.
(4) 누군가가 evict를 하기 위해서는, frame_evict()에서 victim을 찾아야 하는데 victim을 찾는 과정에서
frame_locked되어 있는 frame들을 victim으로 선정하지 않는다. 
(5) 위 과정을 통해서 frame이 뺏기는 것을 막았다.


>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

(1) system call이 paged-out된 page를 접근하려고하면, page_fault가 발생한다.
(2) page fault핸들러에서는, 아래의 4가지 경우에는 바로 exit(-1)를 호출하여 종료된다.
  (1) fauld_addr is NULL
  (2) fauld_addr is above PHYS_BASE
  (3) fault_addr is below code segment(0x08048000)
  (4) page_fault is due to writing r/o page
(3)정상적인 접근일 경우에는, page_fault이 발생한 원인에 따라서 케이스에 맞는 함수
(e.g. load_page_for_write, load_page_for_read등)를 호출하여, page를 memory에 불러온다.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

(1) Supplement page table을 사용하게 되면, 어떤 방식을 사용하던지 frame table과 
process의 local resource를 연결시켜줘야 한다.
(2) 따라서, 각각 독립적인 page_table이, frame_table로 모두 연결되어 버리는 상황이 발생한다.
(3) 이를 위해서 각각의 process별로 lock을 사용하고, frame_table lock을 또 사용하면, deadlock이 발생되게 된다.
(4) 우리는 frame_table의 lock만 지정해주었는데, 그 이유는 원래 page table을 process의 것이므로, 
frame_table만 lock을 해준는 것이 적절한 case처리를 통해서 훨씬 효율적으로 작동할 수 있을 것이라 생각했기 때문이다.
(5) 대부분의 경우, frame_table lock으로 충분했지만, frame_evict과정에서 sync문제가 발생했는데, frame을 evict못하게 하는
frame_locked flag를 통해서 대부분을 처리할 수 있었다. 



			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.
 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

::in syscall.h::

struct mmap_descriptor
{
	int mmap_id;  // mmap id
	void* start_addr;  // user address that mmapped region starts
	int size;	   // size of mmap region
	void* last_page;   // address of the last user virtual page
			      of the mmaped region.
	struct file* file; // struct file of the target file
	struct list_elem elem;
};


::in thread.h::
int mmap_id_given;       // We use this variable to generate next mmap id.
struct list mmap_table;  // list of mmaps that this process/thread has.






---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

First, when mmap is invoked, mmaped pages are lazily loaded into the
memory. That is, they only exist inside the supplementary page table.
When these addresses are accessed, page fault handler examines the spte,
and recognizes that this page is an mmaped page. Then it proceeeds to
fetch a new frame, load data from file, and install the page. This
process is almost identical to the process of lazily loading the code
section. However, the prime difference is that mmaped regions do not
use the swap space. In case of ordinary pages, when they are evicted,
the data is written to a free swap slot, and the swap slot index is
recorded in the spte. In mmap case, instead of using the swap space,
when mmaped pages are evicted, they are written back to the file.
Consequently, when evicted mmap pages are recalled, they are read
from the file, again.



>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

Before actually mapping the memory, mmap() examines the address given
by the user and checks if it wants to map into forbidden regions. Also,
using the given address and the size of the file to map. With these two
infos, we can determine which virtual pages will be occupied by the
soon-to-be-mmaped region. Then, it searches for every virtual page that
currently occupies that region. If some virtual page is already
occupying one of the pages inside soon-to-be-mmaped-region, it aborts
the operation and returns failure.


---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

They are similar indeed. That is why we reused some functions such as
load_page_file_lazy for lazily loading the mmaped region and
loading_from_executable() to actually load data into the page when page
fault handler is invoked. However, since they have some differences,
such as swap space usage, we have a type flag that determines the type
of this supplementary page table entry. If this variable is set to MMAP,
appropriate measures are taken when executing these functions(and also 
eviction function).


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?